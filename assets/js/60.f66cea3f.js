(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{366:function(t,s,a){"use strict";a.r(s);var r=a(3),v=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器知识"}},[t._v("#")]),t._v(" 浏览器知识")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#宏观视角下的浏览器"}},[t._v("宏观视角下的浏览器")])]),s("li",[s("a",{attrs:{href:"#进程和线程"}},[t._v("进程和线程")]),s("ul",[s("li",[s("a",{attrs:{href:"#进程"}},[t._v("进程")])]),s("li",[s("a",{attrs:{href:"#线程"}},[t._v("线程")])]),s("li",[s("a",{attrs:{href:"#页面启动时启动的进程"}},[t._v("页面启动时启动的进程")])])])]),s("li",[s("a",{attrs:{href:"#计算机网络的七层模型简单介绍"}},[t._v("计算机网络的七层模型简单介绍")])]),s("li",[s("a",{attrs:{href:"#udp和tcp"}},[t._v("UDP和TCP")]),s("ul",[s("li",[s("a",{attrs:{href:"#udp"}},[t._v("UDP")])]),s("li",[s("a",{attrs:{href:"#tcp"}},[t._v("TCP")])])])]),s("li",[s("a",{attrs:{href:"#http的请求流程"}},[t._v("HTTP的请求流程")]),s("ul",[s("li",[s("a",{attrs:{href:"#一、构造请求"}},[t._v("一、构造请求")])]),s("li",[s("a",{attrs:{href:"#二、查找缓存"}},[t._v("二、查找缓存")])]),s("li",[s("a",{attrs:{href:"#三、准备ip地址和端口"}},[t._v("三、准备IP地址和端口")])]),s("li",[s("a",{attrs:{href:"#四、等待tcp队列"}},[t._v("四、等待TCP队列")])]),s("li",[s("a",{attrs:{href:"#五、建立tcp连接"}},[t._v("五、建立TCP连接")])]),s("li",[s("a",{attrs:{href:"#六、发送http请求"}},[t._v("六、发送HTTP请求")])])])]),s("li",[s("a",{attrs:{href:"#服务端处理http请求流程"}},[t._v("服务端处理HTTP请求流程")]),s("ul",[s("li",[s("a",{attrs:{href:"#一、返回请求"}},[t._v("一、返回请求")])]),s("li",[s("a",{attrs:{href:"#二、断开连接"}},[t._v("二、断开连接")])])])]),s("li",[s("a",{attrs:{href:"#站点第二次打开会很快的原因"}},[t._v("站点第二次打开会很快的原因")])]),s("li",[s("a",{attrs:{href:"#浏览器的渲染流程"}},[t._v("浏览器的渲染流程")]),s("ul",[s("li",[s("a",{attrs:{href:"#一、构建dom树"}},[t._v("一、构建DOM树")])]),s("li",[s("a",{attrs:{href:"#二、样式计算-recalculate-style"}},[t._v("二、样式计算(Recalculate Style)")])]),s("li",[s("a",{attrs:{href:"#三、布局阶段"}},[t._v("三、布局阶段")])]),s("li",[s("a",{attrs:{href:"#四、分层-图层树"}},[t._v("四、分层 (图层树)")])]),s("li",[s("a",{attrs:{href:"#五、图层的绘制"}},[t._v("五、图层的绘制")])]),s("li",[s("a",{attrs:{href:"#六、栅格化操作"}},[t._v("六、栅格化操作")])]),s("li",[s("a",{attrs:{href:"#七、合成和显示"}},[t._v("七、合成和显示")])]),s("li",[s("a",{attrs:{href:"#八、渲染流水线总结"}},[t._v("八、渲染流水线总结")])])])]),s("li",[s("a",{attrs:{href:"#相关概念"}},[t._v("相关概念")]),s("ul",[s("li",[s("a",{attrs:{href:"#重排"}},[t._v("重排")])]),s("li",[s("a",{attrs:{href:"#重绘"}},[t._v("重绘")])]),s("li",[s("a",{attrs:{href:"#直接合成阶段"}},[t._v("直接合成阶段")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"宏观视角下的浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏观视角下的浏览器"}},[t._v("#")]),t._v(" 宏观视角下的浏览器")]),t._v(" "),s("p",[t._v("主要分为两大类：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("c/s")]),t._v("架构：client -- server")]),t._v(" "),s("li",[s("code",[t._v("b/s")]),t._v("架构：browser -- server")])]),t._v(" "),s("h2",{attrs:{id:"进程和线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),s("h3",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),s("p",[s("code",[t._v("进程")]),t._v("：就是在内存中正在运行的应用程序")]),t._v(" "),s("p",[t._v("进程的特点：")]),t._v(" "),s("ul",[s("li",[t._v("在内存中独占一个内存空间")]),t._v(" "),s("li",[t._v("进程和进程之间是相互隔离的")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("进程")]),t._v(" "),s("p",[t._v("计算机上正在运行的一个应用程序就是一个进程，如微信正在运行,就是一个进程。正在运行的，也就是说进程是一个动态概念，必须是正在运行的某个应用程序才能称得上是进程。")])]),t._v(" "),s("h3",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),s("p",[s("code",[t._v("线程")]),t._v("：就是进程的最小执行单位")]),t._v(" "),s("p",[t._v("线程的特点：")]),t._v(" "),s("ul",[s("li",[t._v("一个进程是由多个线程组成的")]),t._v(" "),s("li",[t._v("每一个线程之间也是相互隔离的")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),s("ul",[s("li",[t._v("线程是进程的基本单位，一个进程由"),s("strong",[t._v("一个或者多个线程")]),t._v("组成，搞清楚这个关系之后，我们可以明确线程就是程序执行的"),s("strong",[t._v("最小单元")]),t._v("。")]),t._v(" "),s("li",[t._v("线程和进程一样，也是动态概念，有创建有销毁，存在只是"),s("strong",[t._v("暂时")]),t._v("的，不是永久性的。")]),t._v(" "),s("li",[t._v("进程与线程的区别在于进程在运行时拥有"),s("strong",[t._v("独立的内存空间")]),t._v("，也就是说每个进程所占用的内存都是独立的")])]),t._v(" "),s("p",[t._v("例如:微信运行时,系统会给它一个运行内存。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("多个线程是共享内存空间的")]),t._v("，但是每个线程的"),s("strong",[t._v("执行是相互独立的")]),t._v("，线程必须依赖于进程才能执行，单独的线程是无法执行的，由进程来控制多个线程的执行，没有进程就不存在线程。")])])]),t._v(" "),s("h3",{attrs:{id:"页面启动时启动的进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面启动时启动的进程"}},[t._v("#")]),t._v(" 页面启动时启动的进程")]),t._v(" "),s("p",[t._v("最少启动了4个进程")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("浏览器进程。")]),t._v(" 主要负责界面显示、用户交互、子进程管理、同时提供存储等功能。")]),t._v(" "),s("li",[s("strong",[t._v("渲染进程。")]),t._v(" 核心任务是将HTML、CSS和JavaScript"),s("strong",[t._v("转换")]),t._v("为"),s("strong",[t._v("用户可以与之交互的网页")]),t._v("，排版引擎Blink和JavaScript引擎V8都运行在该进程中，默认情况下，Chrome为每一个Tab标签页创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下的。")]),t._v(" "),s("li",[s("strong",[t._v("GPU进程。")]),t._v(" GPU图形处理器（英语：graphics processing unit，缩写："),s("em",[t._v("GPU")]),t._v("）,负责3D css效果，网页，Chrome ui的绘制。")]),t._v(" "),s("li",[s("strong",[t._v("网络进程。")]),t._v(" 主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立处理，成为单独一个进程。")]),t._v(" "),s("li",[s("strong",[t._v("插件进程。")]),t._v(" 主要负责插件的运行，因为插件易崩溃，所以通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/1625035099028.png",title:"1625035099028.png",scale:.8}}),t._v(" "),s("h2",{attrs:{id:"计算机网络的七层模型简单介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络的七层模型简单介绍"}},[t._v("#")]),t._v(" 计算机网络的七层模型简单介绍")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("物理层：")]),t._v(" 使用一定的物理介质（光纤、网线）进行0和1的形式传输")]),t._v(" "),s("li",[s("strong",[t._v("数据链路层：")]),t._v(" MAC地址，对byte的封装")]),t._v(" "),s("li",[s("strong",[t._v("网络层：")]),t._v(" IP地址")]),t._v(" "),s("li",[s("strong",[t._v("传输层：")]),t._v(" UDP（用户数据包协议）、TCP（传输控制协议）")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("UDP和TCP")]),t._v(" "),s("p",[s("code",[t._v("UDP")]),t._v("：只管发不管收，比如DNS、微信电话、流媒体")]),t._v(" "),s("p",[s("code",[t._v("TCP")]),t._v("：如果收方不回复确认消息，那么会进行"),s("strong",[t._v("重传")]),t._v("，同时根据数据包编号进行"),s("strong",[t._v("排序后重组")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("会话层：")]),t._v(" 断点续传")]),t._v(" "),s("li",[s("strong",[t._v("表示层：")]),t._v(" 翻译，解决不同系统之间数据传输的问题")]),t._v(" "),s("li",[s("strong",[t._v("应用层：")]),t._v(" HTTP协议")])]),t._v(" "),s("h2",{attrs:{id:"udp和tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp和tcp"}},[t._v("#")]),t._v(" UDP和TCP")]),t._v(" "),s("p",[t._v("IP是非常底层的协议，只负责发送数据包给对方电脑，但对象电脑并不知道把数据包给哪个应用程序，因此，需要基于IP之上能和应用打交道的协议，常用两种协议的UDP(用户数据包协议)和TCP（传输控制协议）协议。")]),t._v(" "),s("h3",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),s("p",[t._v("UDP中最重要的一个信息就是端口号，端口号就是一个数字，每一个想要访问网络的程序都需要绑定一个端口号。通过UDP就能把指定的数据包发送给指定的程序了。"),s("strong",[t._v("所以IP是通过IP地址将数据包发送给指定的电脑，而UDP是通过端口把数据包分发给了正确的应用。")])]),t._v(" "),s("p",[t._v("和IP头一样，端口号会被封装进UDP头里面，UDP头和原始数据包合并组成新的UPD数据包，udp头中除了目的端口，还有源端口号等信息。")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/02.png",title:"02.png",scale:.8}}),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("数据包从A 到 B 的路线")]),t._v(" "),s("ol",[s("li",[t._v("上层将数据包交给传输层")]),t._v(" "),s("li",[t._v("传输层会在数据包前面附加上 UDP 头，组成新的 UDP 数据包，再将新的 UDP 数据包交给网络层")]),t._v(" "),s("li",[t._v("网络层再将 IP 头附加到数据包上，组成新的 IP 数据包，并交给底层")]),t._v(" "),s("li",[t._v("数据包被传输到主机 B 的网络层，在这里主机 B 拆开 IP 头信息，并将拆开来的数据部分交给传输层")]),t._v(" "),s("li",[t._v("在传输层，数据包中的 UDP 头会被拆开，并根据 UDP 中所提供的端口号，把数据部分交给上层的应用\n程序")]),t._v(" "),s("li",[t._v("最终，含有“API”信息的数据包就旅行到了主机 B 上层应用程序这里")])])]),t._v(" "),s("p",[t._v("在使用 UDP 发送数据时，有各种因素会导致数据包出错，虽然 UDP 可以校验数据是否正确，但是对于错误的数据包，UDP 并不提供重发机制，只是丢弃当前的包，而且 UDP 在发送之后也无法知道是否能达到目的地。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[s("strong",[t._v("UDP协议只管发送，不管数据是否正确可靠的送达。")]),t._v(" 虽说 UDP 不能保证数据可靠性，但是传输速度却非常快，所以 UDP 会应用在一些关注速度、但不那么严格要求数据完整性的领域，如在线视频、互动游戏等。")])]),t._v(" "),s("h3",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),s("p",[t._v("对于浏览器请求，或者邮件这类要求数据传输可靠性（reliability）的应用，如果使用 UDP 来传输会存在两个问题：")]),t._v(" "),s("ul",[s("li",[t._v("数据包在传输过程中"),s("strong",[t._v("容易丢失")]),t._v("；")]),t._v(" "),s("li",[t._v("大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件，"),s("strong",[t._v("不能保证大文件数据的完整性。")])])]),t._v(" "),s("p",[t._v("基于这两个问题引入"),s("strong",[t._v("TCP")]),t._v("。TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。相对于 UDP，TCP 有下面两个特点:")]),t._v(" "),s("ul",[s("li",[t._v("对于数据包丢失的情况，TCP 提供"),s("strong",[t._v("重传机制")]),t._v("；")]),t._v(" "),s("li",[t._v("TCP 引入了"),s("strong",[t._v("数据包排序机制")]),t._v("，用来保证把乱"),s("strong",[t._v("序的数据包组合成一个完整的文件")]),t._v("。")])]),t._v(" "),s("p",[t._v("和 UDP 头一样，TCP 头除了包含了目标端口和本机端口号外，还提供了用于排序的序列号，以便接收端通过序号来重排数据包。下面是TCP 下的单个数据包的传输流程：")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/03.png",title:"03.png",scale:.8}}),t._v(" "),s("p",[t._v("通过上图可以看到TCP单个数据包的传输流程和UDP的流程差不多，不同的地方在于，通过TCP头的信息保证了一块大的数据传输的完整性。")]),t._v(" "),s("p",[t._v("在传输数据阶段，"),s("strong",[t._v("接收端需要对每个数据包进行确认")]),t._v("，"),s("strong",[t._v("给发送端以反馈")]),t._v("。倘若在规定时间内，发送端没有接收到接收端反馈的信息，则判断为数据丢失。"),s("strong",[t._v("触发重传机制")]),t._v("。")]),t._v(" "),s("p",[t._v("同样一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，接收端会按照TCP头部中的序号对其排序，从而"),s("strong",[t._v("保证数据的完整性")]),t._v("。")]),t._v(" "),s("p",[t._v("TCP为了保证数据传输的可靠性，牺牲了数据包的传输速度。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("总结")]),t._v(" "),s("ul",[s("li",[t._v("互联网中的数据是通过数据包来传输的，数据包在传入过程中容易丢失和出错。")]),t._v(" "),s("li",[t._v("IP负责把数据包传递到目的主机")]),t._v(" "),s("li",[t._v("UDP负责把数据包送达具体应用")]),t._v(" "),s("li",[t._v("而TCP保证了数据完整地传输")])])]),t._v(" "),s("h2",{attrs:{id:"http的请求流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的请求流程"}},[t._v("#")]),t._v(" HTTP的请求流程")]),t._v(" "),s("h3",{attrs:{id:"一、构造请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、构造请求"}},[t._v("#")]),t._v(" 一、构造请求")]),t._v(" "),s("p",[t._v("首先，浏览器构造请求行，信息如下  构建好之后，浏览器准备发起网络请求")]),t._v(" "),s("h3",{attrs:{id:"二、查找缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、查找缓存"}},[t._v("#")]),t._v(" 二、查找缓存")]),t._v(" "),s("p",[t._v("在正在发起网络请求之前，浏览器会现在浏览器缓存中查询是否有请求的文件，其实"),s("strong",[t._v("浏览器缓存是一种本地保存的资源副本，以供下次请求时直接使用的技术。")])]),t._v(" "),s("p",[t._v("当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求。而不会再去源服务器中重新下载。这样做的好处:")]),t._v(" "),s("ul",[s("li",[t._v("缓解服务的压力，提升性能")])]),t._v(" "),s("p",[t._v("如果缓存查找失败，则进入网络请求。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("一句话总结")]),t._v(" "),s("p",[t._v("有缓存则取缓存，没有缓存则发送网络请求")])]),t._v(" "),s("h3",{attrs:{id:"三、准备ip地址和端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、准备ip地址和端口"}},[t._v("#")]),t._v(" 三、准备IP地址和端口")]),t._v(" "),s("p",[t._v("HTTP和TCP的关系，因为浏览器使用HTTP协议作为应用层协议**，用来封装请求的文本信息**；并使用TCP/IP作传输层协议将它发到网络上，所以在HTTP工作开始之前，浏览器需要TCP与服务器建立连接。也就是说HTTP的内容是通过TCP的传输数据阶段来实现的。")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/05.png",title:"05.png",scale:.8}}),t._v(" "),s("h3",{attrs:{id:"四、等待tcp队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、等待tcp队列"}},[t._v("#")]),t._v(" 四、等待TCP队列")]),t._v(" "),s("p",[t._v("IP地址和端口已经准备好了，不可以马上建立TCP连接。因为Chrome有个机制，同一个域名同时最多只能建立6个TCP连接。如果请求书少于6个，直接进入下一步，建立TCP连接。")]),t._v(" "),s("h3",{attrs:{id:"五、建立tcp连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、建立tcp连接"}},[t._v("#")]),t._v(" 五、建立TCP连接")]),t._v(" "),s("p",[t._v("排队等待结束后，建立TCP连接")]),t._v(" "),s("h3",{attrs:{id:"六、发送http请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、发送http请求"}},[t._v("#")]),t._v(" 六、发送HTTP请求")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/06.png",title:"06.png",scale:.8}}),t._v(" "),s("h2",{attrs:{id:"服务端处理http请求流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端处理http请求流程"}},[t._v("#")]),t._v(" 服务端处理HTTP请求流程")]),t._v(" "),s("h3",{attrs:{id:"一、返回请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、返回请求"}},[t._v("#")]),t._v(" 一、返回请求")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/07.png",title:"07.png",scale:.8}}),t._v(" "),s("h3",{attrs:{id:"二、断开连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、断开连接"}},[t._v("#")]),t._v(" 二、断开连接")]),t._v(" "),s("p",[t._v("通常情况下，一旦服务器向可短返回了请求数据，它就要关闭TCP连接。不过如果在浏览器或服务器在其头部信息加入如下信息：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Connection:Keep-Alive\n")])])]),s("p",[t._v("那么TCP连接在发送后将仍然保持打开状态，这样浏览器可以继续通过同一个TCP连接发送请求。保持TCP连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如一个Web页面中内嵌图片来自于同一个web站点，如果初始化长连接，就不需要重复建立新的TCP连接。")]),t._v(" "),s("h2",{attrs:{id:"站点第二次打开会很快的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#站点第二次打开会很快的原因"}},[t._v("#")]),t._v(" 站点第二次打开会很快的原因")]),t._v(" "),s("p",[t._v("因为在加载页面的过程中，缓存了一些耗时的数据。比如"),s("strong",[t._v("DNS缓存")]),t._v("和"),s("strong",[t._v("页面资源缓存")]),t._v("这两块数据是会被浏览器缓存的。")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/08.png",title:"08.png",scale:.8}}),t._v(" "),s("p",[t._v("通过上图第一次请求可以看出，当服务器返回HTTP响应头给浏览器时，浏览器通过响应头的"),s("strong",[t._v("Cache-Control")]),t._v("字段来设置是否缓存该资源。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Cache-Control:Max-age=2000 //缓存过期时间是2000\n")])])]),s("p",[t._v("这也就意味着，在该缓存资源还没有过期的情况下，如果再次发送请求该资源，会之间返回缓存中的资源给浏览器。")]),t._v(" "),s("p",[t._v("但如果缓存过期了，浏览器则会继续发送网络请求，并且在HTTP请求头中带上:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('If-None-Match:"xxxxxx"\n')])])]),s("p",[t._v("简要来说，很多网站第二次访问能够秒开，是因为这些网站把很多资源都缓存在了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。同时，DNS 数据也被浏览器缓存了，这又省去了 DNS 查询环节。")]),t._v(" "),s("h2",{attrs:{id:"浏览器的渲染流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染流程"}},[t._v("#")]),t._v(" 浏览器的渲染流程")]),t._v(" "),s("h3",{attrs:{id:"一、构建dom树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、构建dom树"}},[t._v("#")]),t._v(" 一、构建DOM树")]),t._v(" "),s("p",[t._v("DOM解析的特点，是不会被阻塞的。因为浏览器无法直接理解和使用HTML，所以需要将HTML转化为浏览器能够理解的结构——"),s("strong",[t._v("DOM树")]),t._v("。DOM树"),s("strong",[t._v("输入内容")]),t._v("就是一个简单的HTML页面，然后经过HTML解析器，最终"),s("strong",[t._v("输出")]),t._v("树状结构的DOM。"),s("strong",[t._v("document")]),t._v("就是DOM结构，DOM和HTML的内容几乎是一样的，但是和HTML不同的是，DOM是"),s("strong",[t._v("保存在内存")]),t._v("中的树状结构，可以通过JavaScript来进行查询和修改内容。")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/09.png",title:"09.png",scale:.8}}),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("可以在控制台输入"),s("code",[t._v("document")]),t._v("查看输出")])]),t._v(" "),s("h3",{attrs:{id:"二、样式计算-recalculate-style"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、样式计算-recalculate-style"}},[t._v("#")]),t._v(" 二、样式计算(Recalculate Style)")]),t._v(" "),s("p",[t._v("样式计算的目的是为了计算出DOM节点中每一个元素的具体样式，这个阶段大体分三步：")]),t._v(" "),s("h4",{attrs:{id:"_1、把css转换为浏览器内容理解的结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、把css转换为浏览器内容理解的结构"}},[t._v("#")]),t._v(" 1、把css转换为浏览器内容理解的结构")]),t._v(" "),s("p",[t._v("css样式的主要来源有：")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/10.png",title:"10.png",scale:.8}}),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("css样式的来源")]),t._v(" "),s("p",[t._v("内联样式，内部样式表，外部样式表")])]),t._v(" "),s("p",[t._v("和HTML文件一样，浏览器也是无法直接理解这些纯文本的CSS样式，所以**当渲染引擎接收到CSS文本的时，会执行一个转换操作，将css文本转换为浏览器可以理解的结构——styleSheets。**渲染引擎会把获取到的 CSS 文本全部转换为 styleSheets 结构中的数据，并且该结构同时具备了查询和修改功能，这会为后面使用JS的样式操作提供基础。")]),t._v(" "),s("h4",{attrs:{id:"_2、转换样式表中的属性值-使其标准化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、转换样式表中的属性值-使其标准化"}},[t._v("#")]),t._v(" 2、转换样式表中的属性值，使其标准化")]),t._v(" "),s("p",[t._v("比如下方所示的CSS样式：")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2em "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("blue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("span")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-weight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("green"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("red"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("标准化后转变为如下的样式：")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/11.png",title:"11.png",scale:.8}}),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("属性值标准化")]),t._v(" "),s("p",[t._v("CSS 文本中有很多属性值，如 2em、blue、bold，这些类型数值不容易被渲染引擎理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值，这个过程就是属性值标准化。")])]),t._v(" "),s("h4",{attrs:{id:"_3、计算出dom树中每一个节点的具体样式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、计算出dom树中每一个节点的具体样式"}},[t._v("#")]),t._v(" 3、计算出DOM树中每一个节点的具体样式")]),t._v(" "),s("p",[t._v("首先是css的继承，"),s("strong",[t._v("css继承是每个DOM节点都包含父节点的样式")]),t._v("。总之，样式计算阶段的目的是为了计算出 DOM 节点中每个元素的具体样式，在计算过程中需要遵守 CSS 的继承和层叠两个规则。这个阶段最终输出的内容是每个 DOM 节点的样式，并被保存在 ComputedStyle 的结构内。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("继承和层叠")]),t._v(" "),s("p",[s("strong",[t._v("继承规则")]),t._v("就是一般文本和字体相关样式都是可以继承的。"),s("strong",[t._v("层叠规则")]),t._v("，嵌套的越深权重就越高。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("计算样式的结果展示")]),t._v(" "),s("p",[t._v("如果想了解每个 DOM 元素最终的计算样式，可以打开 Chrome 的“开发者工具”，选择第一个“element”标签，然后再选择“Computed”子标签")])]),t._v(" "),s("h3",{attrs:{id:"三、布局阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、布局阶段"}},[t._v("#")]),t._v(" 三、布局阶段")]),t._v(" "),s("p",[t._v("现在生成了DOM树和DOM树中元素的样式，但是还不足以显示页面，因为还不知道DOM元素的几何位置，那么接下来就需要"),s("strong",[t._v("计算出DOM树中可见元素的几何位置，通常把这个计算过程叫做布局")]),t._v("。Chrome在布局阶段需要完成两个任务："),s("strong",[t._v("创建布局树")]),t._v("和"),s("strong",[t._v("布局计算")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"_1、创建布局树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建布局树"}},[t._v("#")]),t._v(" 1、创建布局树")]),t._v(" "),s("p",[t._v("DOM树有些元素不会在页面上显示，被用户看到，如head标签和使用了display:none的元素。所以在显示之前，还要额外地构建一棵"),s("strong",[t._v("只包含了可见元素的布局树")]),t._v("。")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/12.png",title:"12.png",scale:.8}}),t._v(" "),s("blockquote",[s("p",[t._v("从上图可以看出，DOM树中所有不可见的节点都没有有包含到布局树中。")])]),t._v(" "),s("h4",{attrs:{id:"_2、布局计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、布局计算"}},[t._v("#")]),t._v(" 2、布局计算")]),t._v(" "),s("p",[t._v("当已经有了一棵完整的布局树，那么接下来就要根据DOM节点对应的css树中的样式，计算布局树节点的坐标位置。")]),t._v(" "),s("blockquote",[s("p",[t._v("也就是计算元素在视口上确切的位置和大小。")])]),t._v(" "),s("h3",{attrs:{id:"四、分层-图层树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、分层-图层树"}},[t._v("#")]),t._v(" 四、分层 (图层树)")]),t._v(" "),s("p",[t._v("有了布局树之后，每个元素的具体位置信息都计算出来了，还是不能着手绘制页面，因为页面中有很多复杂的效果，如一些"),s("code",[t._v("复杂的3D转换")]),t._v("，"),s("code",[t._v("页面滚动")]),t._v("，或者使用"),s("code",[t._v("z-index")]),t._v("，为了更方便的实现这些效果，"),s("strong",[t._v("渲染引擎还需要为特定的节点生成专门的图层，并生成一棵对应的图层树(LayerTree)")]),t._v("。这和PS的图层类似，正是这些图层叠加在一起才最终构成了页面图像。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("展示layer层")]),t._v(" "),s("p",[t._v('想要直观的理解什么是图层，可以打开Chrome的"开发工具"，选择Layers标签，就可以查看可视化页面的分层情况')])]),t._v(" "),s("p",[s("strong",[t._v("实际上，浏览器的页面被分成了很多图层，这些图层叠加在一起后，最终合成了页面。")])]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/04.png",title:"04.png",scale:.8}}),t._v(" "),s("p",[t._v("满足以下两个条件中的任意一个，元素就可以被单独提升为一个图层，渲染引擎才会为特定的节点创建新的图层：")]),t._v(" "),s("h4",{attrs:{id:"_1、拥有层叠上下文属性的元素会被提升为单独的一层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、拥有层叠上下文属性的元素会被提升为单独的一层"}},[t._v("#")]),t._v(" 1、拥有层叠上下文属性的元素会被提升为单独的一层")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1、position:fixed\n2、css 3d   例如:transform:rotateX(30deg)\n3、video\n4、canvas\n5、有css3动画的节点\n")])])]),s("h4",{attrs:{id:"_2、需要剪裁的地方也会被创建为图层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、需要剪裁的地方也会被创建为图层"}},[t._v("#")]),t._v(" 2、需要剪裁的地方也会被创建为图层")]),t._v(" "),s("blockquote",[s("p",[t._v("文字内容溢出div的情况")])]),t._v(" "),s("p",[t._v("比如如下例子🌰：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("lang")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("en"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("UTF-8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("X-UA-Compatible"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("IE=edge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width, initial-scale=1.0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Document"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("style")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token style"}},[s("span",{pre:!0,attrs:{class:"token language-css"}},[t._v("\n        "),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("overflow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    ")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("style")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("所以元素有了层叠上下文的属性或者需要被剪裁，那么就会被提升成为单独一层，你可以参看下图："),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("从上图我们可以看到，document层上有A和B层，而B层之上又有两个图层。这些图层组织在一起也是一颗树状结构。"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("图层树是基于布局树来创建的，为了找出哪些元素需要在哪些层中，渲染引擎会遍历布局树来创建层树（Update LayerTree）。"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("这里我么把div的大小限定为"),s("code",[t._v("200 * 200")]),t._v("像素，而div里面的文字内容比较多，文字所显示的区域肯定会超过"),s("code",[t._v("200 * 200")]),t._v("的面积，这时候就产生了"),s("strong",[t._v("剪裁")]),t._v("，渲染引擎会把裁剪文字内容的一部分用于显示在div区域，下面是运行时的执行结果：")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/01.png",title:"01.png",scale:.8}}),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("小提示💡")]),t._v(" "),s("p",[t._v("出现这种裁剪情况时，渲染引擎会为文字单独为文字创建一层，如出现滚动条，滚动条也会被提升为单独的层。")])]),t._v(" "),s("h3",{attrs:{id:"五、图层的绘制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、图层的绘制"}},[t._v("#")]),t._v(" 五、图层的绘制")]),t._v(" "),s("p",[t._v("渲染引擎实现图层的绘制与画画类似，会把一个图层的绘制拆分为很多小的绘制指令，然后再把这些指令按照顺序组成一个待绘制列表，如下图所示:")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/13.png",title:"13.png",scale:.8}}),t._v(" "),s("p",[t._v("从图中可以看出，绘制列表中的指令其实非常简单，就是让其执行一个简单的绘制操作，比如说绘制粉色矩形或者黑色的线等。而绘制一个元素通常需要好几条绘制指令，因为每个元素的背景、前景、边框都需要单独的指令去绘制。所以在"),s("strong",[t._v("图层绘制阶段，输出的内容就是这些待绘制列表")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("这个地方有点类似于真实场景中的画画，不是一笔画成的，而是由画了很多笔而成。")])]),t._v(" "),s("h3",{attrs:{id:"六、栅格化操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、栅格化操作"}},[t._v("#")]),t._v(" 六、栅格化操作")]),t._v(" "),s("p",[t._v("绘制列表指令用来记录绘制顺序和绘制指令的列表，而实际上"),s("strong",[t._v("绘制操作是由渲染引擎中的合成线程来完成")]),t._v("。通常一个页面可能很大，用户只能看到其中的一部分，我们把"),s("strong",[t._v("用户可以看到的这个区域叫视口(viewport)。"),s("strong",[t._v("比如说，一个图层很大，页面需要滚动底部，才能全部显示。但是通过视口，用户只能看到页面很小的一部分，所以在此种情况下，要一次性绘制完图层所有的内容，会产生很大的开销，且没有必要。基于这个原因，"),s("strong",[t._v("合成线程会将图层划分为图块(tile),"),s("strong",[t._v("这些图块的大小通常是"),s("code",[t._v("256 * 256")]),t._v("或"),s("code",[t._v("512 * 512")]),t._v("。然后")]),t._v("合成线程会按照视口附近的图块来优先生成位图")]),t._v("，实际生成位图的操作就是有栅格化来执行的。所谓栅格化，"),s("strong",[t._v("是指将图块转化为位图(所谓位图就是能够看的到的图层区域)。而图块是栅格化执行的最小单位。"),s("strong",[t._v("渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行，通常，栅格化过程都会使用GPU来加速生成，使用GPU生成位图过程叫")]),t._v("快速栅格化")]),t._v("，或者")]),t._v("GPU栅格化")]),t._v("，生成的位图被保存在GPU内存中。GPU操作是运行在GPU进程中的，那么栅格化，还涉及到了跨进程操作。从图中可以看出，渲染进程把生成图块的指令发送给 GPU，然后在 GPU 中执行生成图块的位图，并保存在 GPU 的内存中。")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/14.png",title:"14.png",scale:.8}}),t._v(" "),s("h3",{attrs:{id:"七、合成和显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、合成和显示"}},[t._v("#")]),t._v(" 七、合成和显示")]),t._v(" "),s("p",[t._v("一旦所有图块被栅格化(又称光栅化)，合成线程就会生成一个绘制图块的命令——"),s("code",[t._v("DrawQuad")]),t._v("，然后将该命令提交给浏览器进程。浏览器进程里有一个叫viz的组件，用来接收合成线程发过来的DrawQuad命令，然后根据DrawQuad命令，将其页面内容绘制到内存中，最后显示在屏幕上。到此，经过一系列的阶段，编写好的HTML、CSS、JavaScript等文件，经过浏览器就会显示为页面。")]),t._v(" "),s("h3",{attrs:{id:"八、渲染流水线总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、渲染流水线总结"}},[t._v("#")]),t._v(" 八、渲染流水线总结")]),t._v(" "),s("p",[t._v("1、渲染进程将HTML内容转换为浏览器能够读懂的"),s("strong",[t._v("DOM树")]),t._v("结构。")]),t._v(" "),s("p",[t._v("2、渲染引擎将CSS样式表转化为浏览器能够理解的"),s("strong",[t._v("css树")]),t._v(",计算出DOM节点的样式。")]),t._v(" "),s("p",[t._v("3、DOM树+css树创建布局树，并计算元素的布局信息。")]),t._v(" "),s("p",[t._v("4、对布局树进行分层，并生成"),s("strong",[t._v("图层树")]),t._v("。")]),t._v(" "),s("p",[t._v("5、对每个"),s("strong",[t._v("图层")]),t._v("生成"),s("strong",[t._v("绘制列表")]),t._v("，并将其提交给合成线程。")]),t._v(" "),s("p",[t._v("6、对每个图层进行单独的绘制")]),t._v(" "),s("p",[t._v("7、合并图层。")]),t._v(" "),s("h2",{attrs:{id:"相关概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),s("h3",{attrs:{id:"重排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重排"}},[t._v("#")]),t._v(" 重排")]),t._v(" "),s("p",[s("code",[t._v("重排")]),t._v("：更新元素的几何属性")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/15.png",title:"15.png",scale:.8}}),t._v(" "),s("p",[t._v("从上图可以看出，如果"),s("strong",[t._v("通过JS或css修改元素的几何位置属性")]),t._v("，如"),s("code",[t._v("width")]),t._v("、"),s("code",[t._v("height")]),t._v("等，那么会触发浏览器的重新布局，解析之后的一系列子阶段，这个过程就叫"),s("strong",[t._v("重排")]),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("小提示💡")]),t._v(" "),s("p",[t._v("重排需要更新完整的渲染流水线，所以开销也最大的。")])]),t._v(" "),s("h3",{attrs:{id:"重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绘"}},[t._v("#")]),t._v(" 重绘")]),t._v(" "),s("p",[s("code",[t._v("重绘")]),t._v("：更细元素的绘制属性")]),t._v(" "),s("p",[t._v("比如通过JS更改某些元素的背景颜色，渲染流水的调整参见下图：")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/16.png",title:"16.png",scale:.8}}),t._v(" "),s("p",[t._v("修改元素的背景色，布局阶段不会执行，因为"),s("strong",[t._v("没有引起几何位置的变换")]),t._v("，所以直接进入绘制，然后执行之后的一系列子阶段，这个过程就叫"),s("strong",[t._v("重绘")]),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("小提示💡")]),t._v(" "),s("p",[t._v("相较重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排效率高。")])]),t._v(" "),s("h3",{attrs:{id:"直接合成阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接合成阶段"}},[t._v("#")]),t._v(" 直接合成阶段")]),t._v(" "),s("p",[s("code",[t._v("合成")]),t._v("：那如果你更改一个既不要布局也不要绘制的属性，渲染引擎将跳过布局和绘制，只执行后续的合成操作")]),t._v(" "),s("Picture",{attrs:{src:"/images/Img_Chrome/17.png",title:"17.png",scale:.8}}),t._v(" "),s("p",[t._v("在上图，使用CSS的transform来实现动画效果，可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率最高，因为是在非主线程上合成的，并没有占用主线程的资源。")])],1)}),[],!1,null,null,null);s.default=v.exports}}]);